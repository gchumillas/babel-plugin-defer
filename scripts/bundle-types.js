const fs = require('fs')
const path = require('path')

function bundleTypes() {
  const distDir = path.join(__dirname, '..', 'dist')
  const indexDts = path.join(distDir, 'index.d.ts')
  const typesDts = path.join(distDir, 'types.d.ts')
  
  if (!fs.existsSync(indexDts) || !fs.existsSync(typesDts)) {
    console.log('⚠️  Type files not found, skipping bundling')
    return
  }

  // Leer archivos de tipos
  const indexContent = fs.readFileSync(indexDts, 'utf8')
  const typesContent = fs.readFileSync(typesDts, 'utf8')

  // Crear contenido bundleado
  const bundledContent = `// Generated by bundle-types.js
// This file contains all type definitions for babel-defer

${typesContent.replace(/export /g, '')}

${indexContent}
`

  // Escribir archivo bundleado
  fs.writeFileSync(indexDts, bundledContent)
  
  // Eliminar archivos auxiliares
  const filesToRemove = [
    'plugin.d.ts',
    'plugin.d.ts.map', 
    'transpiler.d.ts',
    'transpiler.d.ts.map',
    'types.d.ts',
    'types.d.ts.map',
    'index.d.ts.map'
  ]
  
  filesToRemove.forEach(file => {
    const filePath = path.join(distDir, file)
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath)
    }
  })

  console.log('✅ Types bundled successfully!')
  console.log('📦 Single type file: dist/index.d.ts')
}

bundleTypes()
